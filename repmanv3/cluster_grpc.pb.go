// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package repmanv3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterPublicServiceClient is the client API for ClusterPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterPublicServiceClient interface {
	ClusterStatus(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*StatusMessage, error)
	MasterPhysicalBackup(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clusterPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterPublicServiceClient(cc grpc.ClientConnInterface) ClusterPublicServiceClient {
	return &clusterPublicServiceClient{cc}
}

func (c *clusterPublicServiceClient) ClusterStatus(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/signal18.replication_manager.v3.ClusterPublicService/ClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterPublicServiceClient) MasterPhysicalBackup(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/signal18.replication_manager.v3.ClusterPublicService/MasterPhysicalBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterPublicServiceServer is the server API for ClusterPublicService service.
// All implementations must embed UnimplementedClusterPublicServiceServer
// for forward compatibility
type ClusterPublicServiceServer interface {
	ClusterStatus(context.Context, *Cluster) (*StatusMessage, error)
	MasterPhysicalBackup(context.Context, *Cluster) (*emptypb.Empty, error)
	mustEmbedUnimplementedClusterPublicServiceServer()
}

// UnimplementedClusterPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterPublicServiceServer struct {
}

func (UnimplementedClusterPublicServiceServer) ClusterStatus(context.Context, *Cluster) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterStatus not implemented")
}
func (UnimplementedClusterPublicServiceServer) MasterPhysicalBackup(context.Context, *Cluster) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterPhysicalBackup not implemented")
}
func (UnimplementedClusterPublicServiceServer) mustEmbedUnimplementedClusterPublicServiceServer() {}

// UnsafeClusterPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterPublicServiceServer will
// result in compilation errors.
type UnsafeClusterPublicServiceServer interface {
	mustEmbedUnimplementedClusterPublicServiceServer()
}

func RegisterClusterPublicServiceServer(s grpc.ServiceRegistrar, srv ClusterPublicServiceServer) {
	s.RegisterService(&ClusterPublicService_ServiceDesc, srv)
}

func _ClusterPublicService_ClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterPublicServiceServer).ClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal18.replication_manager.v3.ClusterPublicService/ClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterPublicServiceServer).ClusterStatus(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterPublicService_MasterPhysicalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterPublicServiceServer).MasterPhysicalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal18.replication_manager.v3.ClusterPublicService/MasterPhysicalBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterPublicServiceServer).MasterPhysicalBackup(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterPublicService_ServiceDesc is the grpc.ServiceDesc for ClusterPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signal18.replication_manager.v3.ClusterPublicService",
	HandlerType: (*ClusterPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClusterStatus",
			Handler:    _ClusterPublicService_ClusterStatus_Handler,
		},
		{
			MethodName: "MasterPhysicalBackup",
			Handler:    _ClusterPublicService_MasterPhysicalBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
